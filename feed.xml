<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://xinwuchn.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://xinwuchn.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-11-24T15:10:09+00:00</updated><id>https://xinwuchn.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Install calorine on conda-MacOS</title><link href="https://xinwuchn.github.io/blog/2024/Calorine-in-conda/" rel="alternate" type="text/html" title="Install calorine on conda-MacOS"/><published>2024-11-22T00:00:00+00:00</published><updated>2024-11-22T00:00:00+00:00</updated><id>https://xinwuchn.github.io/blog/2024/Calorine-in-conda</id><content type="html" xml:base="https://xinwuchn.github.io/blog/2024/Calorine-in-conda/"><![CDATA[<blockquote> <p>MacOS14.5 + Python 3.10 + conda: The error always shows that it is a problem with C++ compilation, which may be related to the c++ compiler of the MacOS system.</p> </blockquote> <blockquote> <h5 id="the-errors-one-may-encounter">The errors one may encounter</h5> <p>Error 1:</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>File "&lt;string&gt;", line 69, in build_extensions
File "&lt;string&gt;", line 46, in cpp_flag
RuntimeError: Unsupported compiler -- at least C++11 support is needed!
[end of output]
</code></pre></div> </div> <p>Error 2:</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>clang-14: error: invalid argument '-bundle' not allowed with '-dynamiclib'
error: command '/opt/homebrew/opt/llvm@14/bin/clang++' failed with exit code 1
[end of output]
</code></pre></div> </div> </blockquote> <p>Follow the steps:</p> <h6 id="1-modify-setuppy-in-calorine-package"><strong>1. Modify <em>setup.py</em> in calorine package</strong></h6> <p>Download the <a href="https://gitlab.com/materials-modeling/calorine">source code</a> from Gitlab and comment out the following content in setup.py:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/calorine_error-480.webp 480w,/assets/img/calorine_error-800.webp 800w,/assets/img/calorine_error-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/calorine_error.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h6 id="2-make-sure-to-use-clang-and-gcc-from-xcodeapp"><strong>2. Make sure to use <em>clang</em> and <em>gcc</em> from Xcode.app</strong></h6> <ul> <li>Put the system’s /usr/bin path at the front of the PATH variable so that the system’s clang will be found first:</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"/usr/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
</code></pre></div></div> <ul> <li>Explicitly set the CC and CXX environment variables to the system’s clang and clang++:</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">CC</span><span class="o">=</span>/usr/bin/clang
<span class="nb">export </span><span class="nv">CXX</span><span class="o">=</span>/usr/bin/clang++
</code></pre></div></div> <ul> <li>Verify the above settings:</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>which clang
/usr/bin/clang
which clang++
/usr/bin/clang++
</code></pre></div></div> <ul> <li>If you want these settings to be automatically applied every time this conda environment is activated, you can add the above command to the conda environment’s activation script. Assuming your conda environment is named For_Research: Create or edit the file ~/opt/anaconda3/envs/For_Research/etc/conda/activate.d/env_vars.sh (you can create these directories manually if the path does not exist):</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> ~/opt/anaconda3/envs/For_Research/etc/conda/activate.d
nano ~/opt/anaconda3/envs/For_Research/etc/conda/activate.d/env_vars.sh
<span class="c"># After opening it with nano, add the following content:</span>
<span class="c">#!/bin/bash</span>
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"/usr/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
<span class="nb">export </span><span class="nv">CC</span><span class="o">=</span>/usr/bin/clang
<span class="nb">export </span><span class="nv">CXX</span><span class="o">=</span>/usr/bin/clang++
</code></pre></div></div> <ul> <li>After saving and closing the file, make sure the script has executable permissions:</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x ~/opt/anaconda3/envs/For_Research/etc/conda/activate.d/env_vars.sh
</code></pre></div></div> <ul> <li>Reactivate your conda environment to apply these changes:</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda deactivate
conda activate For_Research
which clang
which clang++
</code></pre></div></div> <ul> <li>If the above steps are correct, you should see your system’s clang path.</li> </ul> <h6 id="3-compile"><strong>3. Compile</strong></h6> <p>Finally, in the calorine path of the source code, please compile it:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install</span> <span class="nb">.</span>
</code></pre></div></div> <p>Well done!!! 🎉</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Successfully installed calorine-2.3 numpy-1.26.4
</code></pre></div></div>]]></content><author><name></name></author><category term="Research"/><category term="guidance"/><summary type="html"><![CDATA[If you have problems installing calorine on MacOS, please see here.]]></summary></entry><entry><title type="html">Install lammps in conda environment</title><link href="https://xinwuchn.github.io/blog/2024/Lammps-conda/" rel="alternate" type="text/html" title="Install lammps in conda environment"/><published>2024-11-22T00:00:00+00:00</published><updated>2024-11-22T00:00:00+00:00</updated><id>https://xinwuchn.github.io/blog/2024/Lammps-conda</id><content type="html" xml:base="https://xinwuchn.github.io/blog/2024/Lammps-conda/"><![CDATA[<h6 id="1-create-a-new-conda-environment-and-enter"><strong>1. Create a new conda environment and enter</strong></h6> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda create <span class="nt">--name</span> YOUR_NAME <span class="nv">python</span><span class="o">=</span>3
conda activate YOUR_NAME
</code></pre></div></div> <h6 id="2-install-lammps-package-using-pip"><strong>2. Install lammps package using pip</strong></h6> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>lammps
</code></pre></div></div> <p>Note that you must ensure that the pip package exists in the conda environment itself, which can be viewed through <code class="language-plaintext highlighter-rouge">conda list</code>.</p> <h6 id="3-test-your-installation"><strong>3. Test your installation</strong></h6> <p>Prepare a simple lammps in.lj file:</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code># LAMMPS input script - in.lj

# Initialization
clear
units lj
dimension 3
atom_style atomic

# Atom definition
lattice fcc 1.0
region box block 0 10 0 10 0 10 units lattice
create_box 1 box
create_atoms 1 box
mass 1 1.0

# Potential
pair_style lj/cut 2.5
pair_coeff 1 1 1.0 1.0 2.5

# Run
run 1000
</code></pre></div></div> <h6 id="4-execute-the-above-inlj-file-in-python-script"><strong>4. Execute the above in.lj file in python script</strong></h6> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">lammps</span> <span class="kn">import</span> <span class="n">lammps</span>
<span class="n">lmp</span> <span class="o">=</span> <span class="nf">lammps</span><span class="p">()</span>
<span class="n">lmp</span><span class="p">.</span><span class="nf">file</span><span class="p">(</span><span class="sh">"</span><span class="s">in.lj</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/condalammps-480.webp 480w,/assets/img/condalammps-800.webp 800w,/assets/img/condalammps-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/condalammps.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> If you get this result, congratulations! 🎉 🎉 🎉. </div> <h6 id="5-exit-the-test-environment"><strong>5. Exit the test environment</strong></h6> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda deactivate
</code></pre></div></div>]]></content><author><name></name></author><category term="Research"/><category term="guidance"/><summary type="html"><![CDATA[Do some simple lammps test in conda environment.]]></summary></entry><entry><title type="html">Run CMD on Win system without entering it</title><link href="https://xinwuchn.github.io/blog/2024/Use-cmd-without-in-Win/" rel="alternate" type="text/html" title="Run CMD on Win system without entering it"/><published>2024-11-22T00:00:00+00:00</published><updated>2024-11-22T00:00:00+00:00</updated><id>https://xinwuchn.github.io/blog/2024/Use-cmd-without-in-Win</id><content type="html" xml:base="https://xinwuchn.github.io/blog/2024/Use-cmd-without-in-Win/"><![CDATA[<blockquote> <p>Applicable scenarios: There is a problem with the computer PIN code, your PIN is not available, click to reset: <code class="language-plaintext highlighter-rouge">msconfig</code> after diagnostic startup.</p> </blockquote> <ol> <li>In the login page, hold on <code class="language-plaintext highlighter-rouge">shift</code> and click <code class="language-plaintext highlighter-rouge">Restart</code> in the lower right corner: automatically enter the PE recovery environment.</li> <li>Troubleshooting -&gt; Advanced Options -&gt; Command Prompt</li> <li>Enter the following two lines of commands one by one:</li> </ol> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>move c:<span class="se">\w</span>indows<span class="se">\s</span>ystem32<span class="se">\u</span>tilman.exe c:<span class="se">\</span>
copy c:<span class="se">\w</span>indows<span class="se">\s</span>ystem32<span class="se">\c</span>md.exe c:<span class="se">\w</span>indows<span class="se">\s</span>ystem32<span class="se">\u</span>tilman.exe
</code></pre></div></div> <ol> <li>Close the command prompt window, and after restarting, click the “Easy to Use” button (little person) in the lower right corner to call the command prompt. <blockquote> <p>If you want to solve the problem that the PIN code cannot be used because the startup item fails to load the PIN function, do the following:</p> </blockquote> </li> <li>Enter <code class="language-plaintext highlighter-rouge">msconfig</code> and press <code class="language-plaintext highlighter-rouge">Enter</code> to open the system configuration window. Change the startup selection to “normal startup” or “selective startup”, restart, and then enter the PIN normally to enter the system.</li> <li>Finally, move the file utilman.exe in the root directory of drive C to the directory <code class="language-plaintext highlighter-rouge">C:\Windows\System32\</code>, and replace the file after granting administrator rights. (The following step is for that “Easy to Use” will become CMD or not.)</li> </ol>]]></content><author><name></name></author><category term="Research"/><category term="guidance"/><summary type="html"><![CDATA[What to do if you forget your login PIN code in Windows system？]]></summary></entry><entry><title type="html">How to install CUDA in Linux?</title><link href="https://xinwuchn.github.io/blog/2024/CUDA-in-Linux/" rel="alternate" type="text/html" title="How to install CUDA in Linux?"/><published>2024-11-21T00:00:00+00:00</published><updated>2024-11-21T00:00:00+00:00</updated><id>https://xinwuchn.github.io/blog/2024/CUDA-in-Linux</id><content type="html" xml:base="https://xinwuchn.github.io/blog/2024/CUDA-in-Linux/"><![CDATA[<blockquote> <p>Install the <em>NVIDIA Driver</em> and <em>CUDA Toolkit</em></p> </blockquote> <blockquote> <h5 id="tip">TIP</h5> <p class="block-tip">Traditionally, the <em>NVIDIA Driver</em> and <em>CUDA Toolkit</em> are installed separately, but you can actually install the <em>CUDA Toolkit</em> directly, and the system will automatically install the <em>NVIDIA Driver</em> that matches its version.</p> </blockquote> <p>Following is the detailed installation steps, with CUDA-10.1 as an example:</p> <h6 id="1-check-if-there-is-a-gpu-that-supports-cuda"><strong>1. Check if there is a GPU that supports CUDA</strong></h6> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lspci | <span class="nb">grep</span> <span class="nt">-i</span> nvidia
</code></pre></div></div> <h6 id="2-install-the-gcc-and-make"><strong>2. Install the <em>gcc</em> and <em>make</em></strong></h6> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>gcc g++ make
<span class="c"># Install the dependent libraries required to run the CUDA example</span>
<span class="nb">sudo </span>apt <span class="nb">install </span>libglul-mesa libxi-dev libxmu-dev libglul-mesa-dev freelut3-dev
</code></pre></div></div> <p>Sometimes, too high versions of <em>gcc</em> and <em>g++</em> may cause GPUMD compilation errors, so you need to download lower versions of gcc and g++ and switch versions (gcc is used as a demonstration below):</p> <ul> <li>Check the current default <em>gcc</em> version: <code class="language-plaintext highlighter-rouge">gcc --version</code></li> <li>Check the installed <em>gcc</em> version: <code class="language-plaintext highlighter-rouge">ls /usr/bin/gcc*</code></li> <li>If there is no suitable version then required, perform a specified installation, such as: <code class="language-plaintext highlighter-rouge">sudo apt-get install gcc-7</code></li> <li>Then perform manual version management: <code class="language-plaintext highlighter-rouge">sudo update-alternatives --config gcc</code>, that’s it.</li> </ul> <h6 id="3-download-cuda-toolkit"><strong>3. Download <em>CUDA Toolkit</em></strong></h6> <p><a href="https://developer.nvidia.com/cuda-downloads">CUDA Toolkit</a></p> <h6 id="4-run-and-install"><strong>4. Run and install</strong></h6> <p>The deb package can automatically install the <em>NVIDIA driver</em> by default (the preferred way).</p> <p>Note: when installing Ubuntu, press <code class="language-plaintext highlighter-rouge">E</code> to pop up GRUB mode, add <code class="language-plaintext highlighter-rouge">nouveau.modeset=0</code> at the end of the <strong>Linux</strong> line, and then press <code class="language-plaintext highlighter-rouge">F10</code> to restart. Before installing Ubuntu dual system, please create a blank partition in advance.</p> <blockquote> <h5 id="warning-about-nouveau-driver-disabling">WARNING: About Nouveau driver disabling</h5> <p>Generally, the deb package to install CUDA will automatically install the <em>Nvidai driver</em>, but there may still be problems in actual testing. This may be caused by the open source driver Nouveau being incompletely disabled.</p> <ul> <li>Open the balcklist: <code class="language-plaintext highlighter-rouge">sudo vim /etc/modprobe.d/blacklist.conf</code></li> <li>Insert the following content at the bottom and save it:</li> </ul> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>blacklist nouveau
blacklist lbm-nouveau
options nouveau modeset=0
alias nouveau off
alias lbm-nouveau off
</code></pre></div> </div> <ul> <li>Update: <code class="language-plaintext highlighter-rouge">sudo update-initramfs -u</code></li> <li>Check after restart: <code class="language-plaintext highlighter-rouge">lsmod | grep nouveau</code></li> </ul> </blockquote> <h6 id="5-modify-environment-variables"><strong>5. Modify environment variables</strong></h6> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vim ~/.bashrc
</code></pre></div></div> <p>Add the following environment variables:</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export PATH=$PATH:/usr/local/cuda-10.1/bin
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-10.1/lib64
export CUDA_HOME=$CUDA_HOME:/usr/local/suda-10.1
</code></pre></div></div> <h6 id="6-test"><strong>6. Test</strong></h6> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvidia-smi
nvcc <span class="nt">--version</span>
</code></pre></div></div> <p>nvcc is a CUDA C/C++ compiler that can directly compile source files (.cu) containing C++ syntax. The syntax is similar to gcc. Its path is located at <code class="language-plaintext highlighter-rouge">/usr/local/cuda-10.1/bin</code></p>]]></content><author><name></name></author><category term="Research"/><category term="guidance"/><summary type="html"><![CDATA[The guidance is for installing CUDA within Linux system, and the further GPU computing.]]></summary></entry></feed>